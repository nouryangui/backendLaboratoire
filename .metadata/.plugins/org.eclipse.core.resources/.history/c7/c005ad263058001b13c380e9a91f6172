package com.eureka.auth.security;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@Service // It has to be annotated with @Service.
public class UserDetailsServiceImpl implements UserDetailsService {

	@Autowired
	private BCryptPasswordEncoder encoder;

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		
	
		private AccountService accountService;

		@Override
		public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
			AppUser user = accountService.findUserByUserName(username);
			if (user == null) {
				throw new UsernameNotFoundException(username);

			}
			Collection<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();
			user.getRoles().forEach(r -> {
				authorities.add(new SimpleGrantedAuthority(r.getRoleName()));

			});
			
			return new User(user.getUsername(),user.getPassword(),authorities);

		}
	}

}